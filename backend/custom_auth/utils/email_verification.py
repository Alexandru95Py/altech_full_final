import random
import logging
from django.core.mail import send_mail
from django.conf import settings
from custom_auth.models import EmailVerificationCode

# Logger pentru producÈ›ie/debug
logger = logging.getLogger(__name__)


def generate_verification_code():
    """GenereazÄƒ un cod numeric de 6 cifre pentru verificare email."""
    return ''.join([str(random.randint(0, 9)) for _ in range(6)])


def send_verification_email(user):
    """
    Trimite un email de verificare cÄƒtre utilizator, cu un cod valid 10 minute.
    Codul este salvat Ã®n baza de date. DacÄƒ existÄƒ un cod vechi, Ã®l È™terge mai Ã®ntÃ¢i.
    """
    logger.info(f"[EMAIL] Generare cod pentru utilizator: {user.email}")
    code = generate_verification_code()

    # ðŸ”¥ È˜tergem codurile vechi pentru a crea un obiect nou cu created_at proaspÄƒt
    EmailVerificationCode.objects.filter(user=user).delete()

    # âœ… Cream un cod nou cu timestamp corect
    EmailVerificationCode.objects.create(user=user, code=code)

    subject = "Codul tÄƒu de verificare - ALTech PDF"
    message = (
        f"Bun venit, {user.first_name or user.email}!\n\n"
        f"Codul tÄƒu de verificare este: {code}\n"
        "Este valabil 10 minute.\n\n"
        "Echipa ALTech"
    )
    from_email = settings.DEFAULT_FROM_EMAIL
    recipient_list = [user.email]

    # Logging complet pentru debugging
    logger.info(f"[EMAIL] PregÄƒtit sÄƒ trimitÄƒ cÄƒtre: {user.email}")
    logger.debug(f"[EMAIL] Subiect: {subject}")
    logger.debug(f"[EMAIL] Mesaj: {message}")
    logger.debug(f"[EMAIL] Expeditor: {from_email}")
    logger.debug(f"[EMAIL] Destinatar: {recipient_list}")

    try:
        logger.info("[EMAIL] Trimitere email Ã®n curs...")
        result = send_mail(
            subject,
            message,
            from_email,
            recipient_list,
            fail_silently=False  # important pentru debugging
        )
        if result == 1:
            logger.info(f"[EMAIL] Email trimis cu succes cÄƒtre: {user.email}")
        else:
            logger.warning(f"[EMAIL] Email NU a fost trimis cÄƒtre: {user.email}")
    except Exception as e:
        logger.error(f"[EMAIL] Eroare la trimiterea emailului cÄƒtre {user.email}: {e}")


def send_password_reset_email(user):
    """
    Trimite un email cu cod de resetare parolÄƒ cÄƒtre utilizator, cu un cod valid 10 minute.
    Codul este salvat Ã®n baza de date. DacÄƒ existÄƒ un cod vechi, Ã®l È™terge mai Ã®ntÃ¢i.
    """
    from custom_auth.models import PasswordResetCode
    
    logger.info(f"[PASSWORD RESET] Generare cod pentru utilizator: {user.email}")
    code = generate_verification_code()

    # ðŸ”¥ È˜tergem codurile vechi pentru a crea un obiect nou cu created_at proaspÄƒt
    PasswordResetCode.objects.filter(user=user).delete()

    # âœ… Cream un cod nou cu timestamp corect
    PasswordResetCode.objects.create(user=user, code=code)

    subject = "Cod de resetare parolÄƒ - ALTech PDF"
    message = (
        f"Salut, {user.first_name or user.email}!\n\n"
        f"Ai solicitat resetarea parolei pentru contul tÄƒu ALTech PDF.\n\n"
        f"Codul tÄƒu de resetare este: {code}\n"
        "Este valabil 10 minute.\n\n"
        "DacÄƒ nu ai solicitat resetarea parolei, poÈ›i ignora acest email.\n\n"
        "Echipa ALTech"
    )
    from_email = settings.DEFAULT_FROM_EMAIL
    recipient_list = [user.email]

    # Logging complet pentru debugging
    logger.info(f"[PASSWORD RESET] PregÄƒtit sÄƒ trimitÄƒ cÄƒtre: {user.email}")
    logger.debug(f"[PASSWORD RESET] Subiect: {subject}")
    logger.debug(f"[PASSWORD RESET] Mesaj: {message}")
    logger.debug(f"[PASSWORD RESET] Expeditor: {from_email}")
    logger.debug(f"[PASSWORD RESET] Destinatar: {recipient_list}")

    try:
        logger.info("[PASSWORD RESET] Trimitere email Ã®n curs...")
        result = send_mail(
            subject,
            message,
            from_email,
            recipient_list,
            fail_silently=False  # important pentru debugging
        )
        if result == 1:
            logger.info(f"[PASSWORD RESET] Email trimis cu succes cÄƒtre: {user.email}")
        else:
            logger.warning(f"[PASSWORD RESET] Email NU a fost trimis cÄƒtre: {user.email}")
    except Exception as e:
        logger.error(f"[PASSWORD RESET] Eroare la trimiterea emailului cÄƒtre {user.email}: {e}")
